"""
Configuration optimis√©e pour votre syst√®me Dell XPS 9315
- Intel Core i7-1360P (12√®me g√©n√©ration)
- 16 GB RAM
- Intel Iris Xe Graphics
- SSD NVMe 512GB
"""

import tensorflow as tf
import os
import psutil
import platform

class SystemOptimizer:
    """Optimise automatiquement TensorFlow pour votre configuration"""
    
    def __init__(self):
        self.cpu_count = psutil.cpu_count(logical=True)
        self.ram_gb = psutil.virtual_memory().total / (1024**3)
        self.system_info = self._get_system_info()
        
    def _get_system_info(self):
        """Collecte les informations syst√®me"""
        return {
            'platform': platform.system(),
            'processor': platform.processor(),
            'cpu_cores': self.cpu_count,
            'ram_gb': round(self.ram_gb, 1),
            'python_version': platform.python_version()
        }
    
    def print_system_info(self):
        """Affiche les informations syst√®me"""
        print("üñ•Ô∏è INFORMATIONS SYST√àME")
        print("="*40)
        print(f"üíª Plateforme: {self.system_info['platform']}")
        print(f"üîß Processeur: Intel Core i7-1360P (d√©tect√©: {self.cpu_count} threads)")
        print(f"üß† RAM: {self.system_info['ram_gb']:.1f} GB")
        print(f"üêç Python: {self.system_info['python_version']}")
        print(f"ü§ñ TensorFlow: {tf.__version__}")
        
        # Devices TensorFlow
        print(f"\nüì± Devices TensorFlow:")
        for device in tf.config.list_physical_devices():
            print(f"   - {device}")
        
        print("="*40)
    
    def optimize_tensorflow(self):
        """Configure TensorFlow pour votre mat√©riel"""
        print("‚öôÔ∏è OPTIMISATION TENSORFLOW")
        print("="*40)
        
        # 1. Optimisation CPU (critique pour Intel Iris Xe)
        tf.config.threading.set_intra_op_parallelism_threads(0)  # Utilise tous les c≈ìurs
        tf.config.threading.set_inter_op_parallelism_threads(0)  # Parall√©lisme entre ops
        print(f"‚úÖ CPU optimis√©: {self.cpu_count} threads utilis√©s")
        
        # 2. Optimisation m√©moire GPU
        gpus = tf.config.list_physical_devices('GPU')
        if gpus:
            try:
                for gpu in gpus:
                    tf.config.experimental.set_memory_growth(gpu, True)
                print(f"‚úÖ GPU memory growth activ√© pour {len(gpus)} GPU(s)")
            except RuntimeError as e:
                print(f"‚ö†Ô∏è Erreur GPU config: {e}")
        else:
            print("‚ÑπÔ∏è Pas de GPU d√©di√© d√©tect√© - Intel Iris Xe utilis√©")
        
        # 3. Optimisation de la pr√©cision mixte (si support√©e)
        try:
            from tensorflow.keras import mixed_precision
            policy = mixed_precision.Policy('mixed_float16')
            mixed_precision.set_global_policy(policy)
            print("‚úÖ Pr√©cision mixte float16 activ√©e")
        except Exception as e:
            print(f"‚ö†Ô∏è Pr√©cision mixte non disponible: {e}")
        
        # 4. Configuration XLA (acc√©l√©ration)
        try:
            tf.config.optimizer.set_jit(True)
            print("‚úÖ XLA JIT compilation activ√©e")
        except:
            print("‚ö†Ô∏è XLA non disponible")
        
        print("="*40)
    
    def get_recommended_config(self):
        """Retourne la configuration recommand√©e pour l'entra√Ænement"""
        # Calculs bas√©s sur votre RAM de 16GB
        recommended_batch_size = min(16, max(4, int(self.ram_gb)))
        
        config = {
            'batch_size': 8,  # Optimis√© pour 16GB RAM
            'prefetch_buffer': tf.data.AUTOTUNE,
            'num_parallel_calls': tf.data.AUTOTUNE,
            'cache_dataset': self.ram_gb >= 8,  # Cache si assez de RAM
            'mixed_precision': True,
            'max_epochs': 50,  # R√©duit pour tests plus rapides
            'learning_rate': 0.001,
            'early_stopping_patience': 10,
            'reduce_lr_patience': 5,
            'model_checkpoint': True
        }
        
        return config

# Configuration par d√©faut optimis√©e pour votre syst√®me
OPTIMIZED_CONFIG = {
    # Param√®tres d'entra√Ænement
    'BATCH_SIZE': 8,
    'EPOCHS': 50,
    'LEARNING_RATE': 0.001,
    'VALIDATION_SPLIT': 0.2,
    
    # Param√®tres du mod√®le
    'IMG_HEIGHT': 128,
    'IMG_WIDTH': 128,
    'USE_LIGHT_MODEL': True,  # Recommand√© pour votre config
    
    # Param√®tres de donn√©es
    'CACHE_DATASET': True,
    'PREFETCH_BUFFER': tf.data.AUTOTUNE,
    'NUM_PARALLEL_CALLS': tf.data.AUTOTUNE,
    'SHUFFLE_BUFFER': 100,
    
    # Callbacks
    'EARLY_STOPPING_PATIENCE': 10,
    'REDUCE_LR_PATIENCE': 5,
    'REDUCE_LR_FACTOR': 0.5,
    'MIN_LR': 1e-7,
    
    # Chemins
    'DATASET_DIR': 'dataset',
    'IMAGES_DIR': '../dataset/CapturedImages',
    'MASKS_DIR': '../dataset/mask',
    'CHECKPOINTS_DIR': 'checkpoints',
    'RESULTS_DIR': 'results'
}

def setup_environment():
    """Configure l'environnement complet"""
    print("üöÄ CONFIGURATION DE L'ENVIRONNEMENT")
    print("="*50)
    
    # Cr√©er l'optimiseur
    optimizer = SystemOptimizer()
    
    # Afficher les infos syst√®me
    optimizer.print_system_info()
    
    # Optimiser TensorFlow
    optimizer.optimize_tensorflow()
    
    # Cr√©er les dossiers n√©cessaires
    dirs_to_create = [
        OPTIMIZED_CONFIG['CHECKPOINTS_DIR'],
        OPTIMIZED_CONFIG['RESULTS_DIR']
    ]
    
    print("üìÅ Cr√©ation des dossiers...")
    for dir_path in dirs_to_create:
        os.makedirs(dir_path, exist_ok=True)
        print(f"   ‚úÖ {dir_path}")
    
    # Retourner la config recommand√©e
    recommended = optimizer.get_recommended_config()
    
    print("\nüéØ CONFIGURATION RECOMMAND√âE")
    print("="*40)
    for key, value in recommended.items():
        print(f"   {key}: {value}")
    
    print("\n‚úÖ Environnement configur√© et optimis√©!")
    print("="*50)
    
    return optimizer, recommended

def check_dataset():
    """V√©rifie la pr√©sence et la validit√© du dataset"""
    print("\nüîç V√âRIFICATION DU DATASET")
    print("="*40)
    
    images_dir = OPTIMIZED_CONFIG['IMAGES_DIR']
    masks_dir = OPTIMIZED_CONFIG['MASKS_DIR']
    
    # V√©rifier les dossiers
    if not os.path.exists(images_dir):
        print(f"‚ùå Dossier images manquant: {images_dir}")
        return False
    
    if not os.path.exists(masks_dir):
        print(f"‚ùå Dossier masques manquant: {masks_dir}")
        return False
    
    # Compter les fichiers
    image_files = [f for f in os.listdir(images_dir) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    mask_files = [f for f in os.listdir(masks_dir) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    
    print(f"üìä Images trouv√©es: {len(image_files)}")
    print(f"üìä Masques trouv√©s: {len(mask_files)}")
    
    if len(image_files) == 0:
        print("‚ùå Aucune image trouv√©e!")
        return False
    
    if len(mask_files) == 0:
        print("‚ùå Aucun masque trouv√©!")
        return False
    
    if len(image_files) != len(mask_files):
        print(f"‚ö†Ô∏è Nombre d'images ({len(image_files)}) != nombre de masques ({len(mask_files)})")
    
    # V√©rifier quelques fichiers
    sample_size = min(5, len(image_files))
    print(f"\nüîç V√©rification de {sample_size} √©chantillons...")
    
    for i in range(sample_size):
        img_path = os.path.join(images_dir, image_files[i])
        try:
            # Test de chargement
            img = tf.io.read_file(img_path)
            img = tf.image.decode_png(img, channels=3)
            print(f"   ‚úÖ {image_files[i]} - {img.shape}")
        except Exception as e:
            print(f"   ‚ùå {image_files[i]} - Erreur: {e}")
            return False
    
    print("‚úÖ Dataset valide!")
    return True

def performance_tips():
    """Affiche des conseils d'optimisation personnalis√©s"""
    print("\nüí° CONSEILS D'OPTIMISATION POUR VOTRE SYST√àME")
    print("="*60)
    
    print("üîã Pour am√©liorer les performances:")
    print("   ‚Ä¢ Fermez les applications inutiles (lib√®re RAM)")
    print("   ‚Ä¢ Branchez l'adaptateur secteur (max performance CPU)")
    print("   ‚Ä¢ V√©rifiez que le ventilateur fonctionne (√©vite throttling)")
    
    print("\n‚öôÔ∏è Si l'entra√Ænement est trop lent:")
    print("   ‚Ä¢ R√©duisez IMG_HEIGHT/WIDTH de 128 √† 96")
    print("   ‚Ä¢ Diminuez BATCH_SIZE de 8 √† 4")
    print("   ‚Ä¢ Utilisez use_light_model=True")
    
    print("\nüß† Si probl√®mes de m√©moire:")
    print("   ‚Ä¢ D√©sactivez le cache: cache_dataset=False")
    print("   ‚Ä¢ R√©duisez BATCH_SIZE √† 4 ou moins")
    print("   ‚Ä¢ Fermez Chrome/Firefox (consomme beaucoup de RAM)")
    
    print("\nüöÄ Pour acc√©l√©rer encore plus:")
    print("   ‚Ä¢ Utilisez Google Colab (GPU gratuit)")
    print("   ‚Ä¢ Envisagez un eGPU via Thunderbolt 4")
    print("   ‚Ä¢ SSD externe rapide pour le dataset")
    
    print("="*60)

if __name__ == "__main__":
    # Test de la configuration
    optimizer, config = setup_environment()
    
    # V√©rifier le dataset
    dataset_ok = check_dataset()
    
    # Afficher les conseils
    performance_tips()
    
    print(f"\nüéØ Pr√™t pour l'entra√Ænement: {'‚úÖ' if dataset_ok else '‚ùå'}")